"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getContentSxProps = void 0;

var _WidthModel = require("../Width/WidthModel");

var _combineBreakpoints = require("../utils/combineBreakpoints");

var _pickNearestBreakpoint = require("../utils/pickNearestBreakpoint");

var _toValidCssValue = require("../utils/toValidCssValue");

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var getContentSxProps = function getContentSxProps(modules, id) {
  var _leftEdgeSidebar$getO, _rightEdgeSidebar$get;

  var result = {
    width: {},
    marginLeft: {},
    marginRight: {}
  };
  var leftEdgeSidebar = modules.leftEdgeSidebar,
      rightEdgeSidebar = modules.rightEdgeSidebar;
  var leftOccupiedSpace = (_leftEdgeSidebar$getO = leftEdgeSidebar === null || leftEdgeSidebar === void 0 ? void 0 : leftEdgeSidebar.getOccupiedSpace()) !== null && _leftEdgeSidebar$getO !== void 0 ? _leftEdgeSidebar$getO : {};
  var rightOccupiedSpace = (_rightEdgeSidebar$get = rightEdgeSidebar === null || rightEdgeSidebar === void 0 ? void 0 : rightEdgeSidebar.getOccupiedSpace()) !== null && _rightEdgeSidebar$get !== void 0 ? _rightEdgeSidebar$get : {};
  var breakpoints = (0, _combineBreakpoints.combineBreakpoints)(leftOccupiedSpace, rightOccupiedSpace);

  var _iterator = _createForOfIteratorHelper(breakpoints),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var key = _step.value;
      var bp = key;
      var effectLeft = (0, _WidthModel.createWidthInterface)(0);

      if (leftEdgeSidebar) {
        effectLeft = (0, _WidthModel.createWidthInterface)(leftEdgeSidebar.isFlexiblePersistent(bp, id) ? 0 : (0, _pickNearestBreakpoint.pickNearestBreakpoint)(leftOccupiedSpace, bp));
        var occupiedSpace = leftOccupiedSpace[bp];

        if (occupiedSpace) {
          result.marginLeft[bp] = (0, _toValidCssValue.toValidCssValue)(occupiedSpace);
        }
      }

      var effectRight = (0, _WidthModel.createWidthInterface)(0);

      if (rightEdgeSidebar) {
        effectRight = (0, _WidthModel.createWidthInterface)(rightEdgeSidebar.isFlexiblePersistent(bp, id) ? 0 : (0, _pickNearestBreakpoint.pickNearestBreakpoint)(rightOccupiedSpace, bp));
        var _occupiedSpace = rightOccupiedSpace[bp];

        if (_occupiedSpace) {
          result.marginRight[bp] = (0, _toValidCssValue.toValidCssValue)(_occupiedSpace);
        }
      }

      result.width[bp] = effectLeft.combine(effectRight).getStyle().width;
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return result;
};

exports.getContentSxProps = getContentSxProps;
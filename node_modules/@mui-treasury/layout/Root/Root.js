"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Root = exports.LayoutConsumer = exports.useLayoutCtx = void 0;

var _react = _interopRequireDefault(require("react"));

var _EdgeSidebarBuilder = require("../EdgeSidebar/EdgeSidebarBuilder");

var _HeaderBuilder = require("../Header/HeaderBuilder");

var _InsetSidebarBuilder = require("../InsetSidebar/InsetSidebarBuilder");

var _constant = require("../utils/constant");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var LayoutContext = /*#__PURE__*/_react["default"].createContext(undefined);

LayoutContext.displayName = "LayoutContext";

var useLayoutCtx = function useLayoutCtx() {
  var ctx = _react["default"].useContext(LayoutContext);

  if (!ctx) {
    throw new Error("useLayoutCtx must be rendered under LayoutProvider");
  }

  return ctx;
};

exports.useLayoutCtx = useLayoutCtx;
var LayoutConsumer = LayoutContext.Consumer;
exports.LayoutConsumer = LayoutConsumer;
var INITIAL_EDGE_SIDEBAR_STATE = {
  open: false,
  collapsed: false
};

var setUpEdgeSidebar = function setUpEdgeSidebar(builder) {
  var autoGenInitialState = {
    leftEdgeSidebar: {},
    rightEdgeSidebar: {}
  };

  if (builder.leftEdgeSidebar) {
    builder.leftEdgeSidebar.id = _constant.LEFT_EDGE_SIDEBAR_ID;
    autoGenInitialState.leftEdgeSidebar = INITIAL_EDGE_SIDEBAR_STATE;
  }

  if (builder.rightEdgeSidebar) {
    builder.rightEdgeSidebar.id = _constant.RIGHT_EDGE_SIDEBAR_ID;
    autoGenInitialState.rightEdgeSidebar = INITIAL_EDGE_SIDEBAR_STATE;
  }

  return autoGenInitialState;
};

var injectStateToEdgeSidebar = function injectStateToEdgeSidebar(builder, state) {
  if (builder.leftEdgeSidebar) {
    var _state$leftEdgeSideba;

    builder.leftEdgeSidebar.setState((_state$leftEdgeSideba = state.leftEdgeSidebar) !== null && _state$leftEdgeSideba !== void 0 ? _state$leftEdgeSideba : {});
  }

  if (builder.rightEdgeSidebar) {
    var _state$rightEdgeSideb;

    builder.rightEdgeSidebar.setState((_state$rightEdgeSideb = state.rightEdgeSidebar) !== null && _state$rightEdgeSideb !== void 0 ? _state$rightEdgeSideb : {});
  }
};

var Root = function Root(_ref) {
  var controlledInitialState = _ref.initialState,
      scheme = _ref.scheme,
      children = _ref.children;

  if (!scheme) {
    throw new Error("Missing scheme! fixed by passing `scheme` to <Root scheme={scheme} />");
  }

  var builder = {};
  if (scheme.header) builder.header = new _HeaderBuilder.HeaderBuilder(scheme.header);
  if (scheme.topHeader) builder.topHeader = new _HeaderBuilder.HeaderBuilder(scheme.topHeader);
  if (scheme.subheader) builder.subheader = new _HeaderBuilder.HeaderBuilder(scheme.subheader);
  if (scheme.leftEdgeSidebar) builder.leftEdgeSidebar = new _EdgeSidebarBuilder.EdgeSidebarBuilder(scheme.leftEdgeSidebar);
  if (scheme.rightEdgeSidebar) builder.rightEdgeSidebar = new _EdgeSidebarBuilder.EdgeSidebarBuilder(scheme.rightEdgeSidebar);
  if (scheme.rightInsetSidebar) builder.rightInsetSidebar = new _InsetSidebarBuilder.InsetSidebarBuilder(scheme.rightInsetSidebar);
  if (scheme.leftInsetSidebar) builder.leftInsetSidebar = new _InsetSidebarBuilder.InsetSidebarBuilder(scheme.leftInsetSidebar);
  var autoGenInitialState = setUpEdgeSidebar(builder);

  var _React$useState = _react["default"].useState(_objectSpread(_objectSpread({}, autoGenInitialState.leftEdgeSidebar), controlledInitialState === null || controlledInitialState === void 0 ? void 0 : controlledInitialState.leftEdgeSidebar)),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      leftState = _React$useState2[0],
      setLeftState = _React$useState2[1];

  var _React$useState3 = _react["default"].useState(_objectSpread(_objectSpread({}, autoGenInitialState.rightEdgeSidebar), controlledInitialState === null || controlledInitialState === void 0 ? void 0 : controlledInitialState.rightEdgeSidebar)),
      _React$useState4 = _slicedToArray(_React$useState3, 2),
      rightState = _React$useState4[0],
      setRightState = _React$useState4[1];

  var setOpen = function setOpen(id, value) {
    function setter(state) {
      return state.open === value ? state : _objectSpread(_objectSpread({}, state), {}, {
        open: value
      });
    }

    if (id === _constant.LEFT_EDGE_SIDEBAR_ID) {
      setLeftState(setter);
    }

    if (id === _constant.RIGHT_EDGE_SIDEBAR_ID) {
      setRightState(setter);
    }
  };

  var setCollapsed = function setCollapsed(id, value) {
    function setter(state) {
      return state.collapsed === value ? state : _objectSpread(_objectSpread({}, state), {}, {
        collapsed: value
      });
    }

    if (id === _constant.LEFT_EDGE_SIDEBAR_ID) {
      setLeftState(setter);
    }

    if (id === _constant.RIGHT_EDGE_SIDEBAR_ID) {
      setRightState(setter);
    }
  };

  var toggleLeftSidebarOpen = function toggleLeftSidebarOpen() {
    return setLeftState(function (state) {
      return _objectSpread(_objectSpread({}, state), {}, {
        open: !state.open
      });
    });
  };

  var toggleLeftSidebarCollapsed = function toggleLeftSidebarCollapsed() {
    return setLeftState(function (state) {
      return _objectSpread(_objectSpread({}, state), {}, {
        collapsed: !state.collapsed
      });
    });
  };

  var toggleRightSidebarOpen = function toggleRightSidebarOpen() {
    return setRightState(function (state) {
      return _objectSpread(_objectSpread({}, state), {}, {
        open: !state.open
      });
    });
  };

  var toggleRightSidebarCollapsed = function toggleRightSidebarCollapsed() {
    return setRightState(function (state) {
      return _objectSpread(_objectSpread({}, state), {}, {
        collapsed: !state.collapsed
      });
    });
  };

  injectStateToEdgeSidebar(builder, {
    leftEdgeSidebar: leftState,
    rightEdgeSidebar: rightState
  }); // assign Effect

  if (builder.header) {
    builder.header.effectedBy = {
      leftEdgeSidebar: builder.leftEdgeSidebar,
      rightEdgeSidebar: builder.rightEdgeSidebar
    };
  }

  if (builder.topHeader) {
    builder.topHeader.effectedBy = {
      leftEdgeSidebar: builder.leftEdgeSidebar,
      rightEdgeSidebar: builder.rightEdgeSidebar
    };
  }

  if (builder.subheader) {
    builder.subheader.effectedBy = {
      leftEdgeSidebar: builder.leftEdgeSidebar,
      rightEdgeSidebar: builder.rightEdgeSidebar
    };
  }

  if (builder.leftInsetSidebar) {
    builder.leftInsetSidebar.anchor = "left";
    builder.leftInsetSidebar.effectedBy = {
      header: builder.header
    };
  }

  if (builder.rightInsetSidebar) {
    builder.rightInsetSidebar.anchor = "right";
    builder.rightInsetSidebar.effectedBy = {
      header: builder.header
    };
  }

  var ctx = {
    state: {
      leftEdgeSidebar: leftState,
      rightEdgeSidebar: rightState
    },
    builder: builder,
    setOpen: setOpen,
    setCollapsed: setCollapsed,
    toggleLeftSidebarOpen: toggleLeftSidebarOpen,
    toggleLeftSidebarCollapsed: toggleLeftSidebarCollapsed,
    toggleRightSidebarOpen: toggleRightSidebarOpen,
    toggleRightSidebarCollapsed: toggleRightSidebarCollapsed
  };
  return /*#__PURE__*/_react["default"].createElement(LayoutContext.Provider, {
    value: ctx
  }, typeof children === "function" ? children(ctx) : children);
};

exports.Root = Root;
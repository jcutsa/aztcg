"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.HeaderBuilder = void 0;

var _constant = require("../utils/constant");

var _pickNearestBreakpoint = require("../utils/pickNearestBreakpoint");

var _combineBreakpoints = require("../utils/combineBreakpoints");

var _WidthModel = require("../Width/WidthModel");

var _toValidCssValue = require("../utils/toValidCssValue");

var _ResponsiveBuilder2 = require("../shared/ResponsiveBuilder");

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var HeaderBuilder = /*#__PURE__*/function (_ResponsiveBuilder) {
  _inherits(HeaderBuilder, _ResponsiveBuilder);

  var _super = _createSuper(HeaderBuilder);

  function HeaderBuilder(params) {
    var _this;

    _classCallCheck(this, HeaderBuilder);

    _this = _super.call(this, params);

    _defineProperty(_assertThisInitialized(_this), "effectedBy", {});

    return _this;
  }

  _createClass(HeaderBuilder, [{
    key: "isClipped",
    value: function isClipped(clippableId, breakpoint) {
      var headerBreakpointConfig = (0, _pickNearestBreakpoint.pickNearestBreakpoint)(this.config, breakpoint);

      if (typeof (headerBreakpointConfig === null || headerBreakpointConfig === void 0 ? void 0 : headerBreakpointConfig.clipped) === "boolean" && headerBreakpointConfig.clipped) {
        return true;
      }

      return _typeof(headerBreakpointConfig === null || headerBreakpointConfig === void 0 ? void 0 : headerBreakpointConfig.clipped) === "object" && (headerBreakpointConfig === null || headerBreakpointConfig === void 0 ? void 0 : headerBreakpointConfig.clipped[clippableId]);
    }
  }, {
    key: "isAboveSomeEdgeSidebar",
    value: function isAboveSomeEdgeSidebar(breakpoint) {
      var headerBreakpointConfig = (0, _pickNearestBreakpoint.pickNearestBreakpoint)(this.config, breakpoint);
      if (!headerBreakpointConfig) return false;
      var clipped = headerBreakpointConfig.clipped;

      if (typeof clipped === "boolean") {
        return clipped;
      }

      return !!(clipped !== null && clipped !== void 0 && clipped.leftEdgeSidebar) || !!(clipped !== null && clipped !== void 0 && clipped.rightEdgeSidebar);
    }
  }, {
    key: "getOffsetHeight",
    value: function getOffsetHeight() {
      return this.generateSxWithHidden({
        // https://github.com/mui-org/material-ui/blob/next/packages/material-ui-system/src/sizing.js#L5
        hiddenValue: "0px",
        // don't use 0 as number because it will become 0%
        assignValue: function assignValue(breakpointConfig) {
          return breakpointConfig.position === "fixed" ? breakpointConfig.height : "0px";
        }
      });
    }
  }, {
    key: "getSxHeight",
    value: function getSxHeight() {
      var result = this.generateSxWithHidden({
        assignValue: function assignValue(breakpointConfig) {
          return breakpointConfig.height;
        },
        // https://github.com/mui-org/material-ui/blob/next/packages/material-ui-system/src/sizing.js#L5
        hiddenValue: "0px" // don't use 0 as number because it will become 0%

      });
      return _objectSpread({}, Object.keys(result).length && {
        height: result
      });
    }
  }, {
    key: "getSxMarginHorizontal",
    value: function getSxMarginHorizontal() {
      var marginLeft = {};
      var _this$effectedBy = this.effectedBy,
          leftEdgeSidebar = _this$effectedBy.leftEdgeSidebar,
          rightEdgeSidebar = _this$effectedBy.rightEdgeSidebar;

      if (leftEdgeSidebar) {
        var occupiedSpace = leftEdgeSidebar === null || leftEdgeSidebar === void 0 ? void 0 : leftEdgeSidebar.getOccupiedSpace();
        var breakpoints = this.mergeBreakpoints(occupiedSpace);

        var _iterator = _createForOfIteratorHelper(breakpoints),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var bp = _step.value;
            marginLeft[bp] = this.isClipped(_constant.LEFT_EDGE_SIDEBAR_ID, bp) ? "0px" : (0, _toValidCssValue.toValidCssValue)((0, _pickNearestBreakpoint.pickNearestBreakpoint)(occupiedSpace, bp));
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }

      var marginRight = {};

      if (rightEdgeSidebar) {
        var _occupiedSpace = rightEdgeSidebar === null || rightEdgeSidebar === void 0 ? void 0 : rightEdgeSidebar.getOccupiedSpace();

        var _breakpoints = this.mergeBreakpoints(_occupiedSpace);

        var _iterator2 = _createForOfIteratorHelper(_breakpoints),
            _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var _bp = _step2.value;
            marginRight[_bp] = this.isClipped(_constant.RIGHT_EDGE_SIDEBAR_ID, _bp) ? "0px" : (0, _toValidCssValue.toValidCssValue)((0, _pickNearestBreakpoint.pickNearestBreakpoint)(_occupiedSpace, _bp));
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
      }

      return _objectSpread(_objectSpread({}, Object.keys(marginLeft).length && {
        marginLeft: marginLeft
      }), Object.keys(marginRight).length && {
        marginRight: marginRight
      });
    }
  }, {
    key: "getSxWidth",
    value: function getSxWidth() {
      var _leftEdgeSidebar$getO, _rightEdgeSidebar$get;

      var result = {};
      var _this$effectedBy2 = this.effectedBy,
          leftEdgeSidebar = _this$effectedBy2.leftEdgeSidebar,
          rightEdgeSidebar = _this$effectedBy2.rightEdgeSidebar;
      var leftOccupiedSpace = (_leftEdgeSidebar$getO = leftEdgeSidebar === null || leftEdgeSidebar === void 0 ? void 0 : leftEdgeSidebar.getOccupiedSpace()) !== null && _leftEdgeSidebar$getO !== void 0 ? _leftEdgeSidebar$getO : {};
      var rightOccupiedSpace = (_rightEdgeSidebar$get = rightEdgeSidebar === null || rightEdgeSidebar === void 0 ? void 0 : rightEdgeSidebar.getOccupiedSpace()) !== null && _rightEdgeSidebar$get !== void 0 ? _rightEdgeSidebar$get : {};
      var breakpoints = this.mergeBreakpoints((0, _combineBreakpoints.combineBreakpoints)(leftOccupiedSpace, rightOccupiedSpace));

      var _iterator3 = _createForOfIteratorHelper(breakpoints),
          _step3;

      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var key = _step3.value;
          var bp = key;
          var effectLeft = (0, _WidthModel.createWidthInterface)(0);

          if (leftEdgeSidebar) {
            if (!this.isClipped(_constant.LEFT_EDGE_SIDEBAR_ID, bp)) {
              effectLeft = (0, _WidthModel.createWidthInterface)(leftEdgeSidebar.isFlexiblePersistent(bp, "header") ? 0 : (0, _pickNearestBreakpoint.pickNearestBreakpoint)(leftOccupiedSpace, bp));
            }
          }

          var effectRight = (0, _WidthModel.createWidthInterface)(0);

          if (rightEdgeSidebar) {
            if (!this.isClipped(_constant.RIGHT_EDGE_SIDEBAR_ID, bp)) {
              effectRight = (0, _WidthModel.createWidthInterface)(rightEdgeSidebar.isFlexiblePersistent(bp, "header") ? 0 : (0, _pickNearestBreakpoint.pickNearestBreakpoint)(rightOccupiedSpace, bp));
            }
          }

          result[bp] = effectLeft.combine(effectRight).getStyle().width;
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }

      return _objectSpread({}, Object.keys(result).length && {
        width: result
      });
    }
  }, {
    key: "getSxZIndex",
    value: function getSxZIndex() {
      var _this2 = this;

      var theme = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _constant.DEFAULT_THEME;
      var result = this.generateSx(function (config, bp) {
        var _config$layer;

        return _this2.isAboveSomeEdgeSidebar(bp) ? theme.zIndex.drawer + 10 + ((_config$layer = config.layer) !== null && _config$layer !== void 0 ? _config$layer : 0) : theme.zIndex.appBar;
      }, theme.zIndex.appBar);
      return _objectSpread({}, Object.keys(result).length && {
        zIndex: result
      });
    }
  }, {
    key: "getSxProps",
    value: function getSxProps() {
      var theme = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _constant.DEFAULT_THEME;
      var sxTop = this.generateSx(function (config) {
        return config.top;
      }, 0);
      var sxDisplay = this.getSxDisplay("flex");
      var displayKeys = Object.keys(sxDisplay);
      var shouldAttachDisplay = displayKeys.length > 1 || displayKeys.length === 1 && displayKeys[0] !== "xs";
      return _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({
        position: this.generateSx(function (config) {
          return config.position;
        })
      }, Object.keys(sxTop).length && {
        top: sxTop
      }), shouldAttachDisplay && {
        display: sxDisplay
      }), this.getSxHeight()), this.getSxWidth()), this.getSxMarginHorizontal()), this.getSxZIndex(theme));
    }
  }]);

  return HeaderBuilder;
}(_ResponsiveBuilder2.ResponsiveBuilder);

exports.HeaderBuilder = HeaderBuilder;
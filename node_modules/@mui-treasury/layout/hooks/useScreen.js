"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useScreen = void 0;

var _react = _interopRequireDefault(require("react"));

var _utils = require("@mui/material/utils");

var _styles = require("@mui/material/styles");

var _mapWidthToScreen = require("../utils/mapWidthToScreen");

var _WindowContext = require("../WindowContext");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function getWindowWidth(w) {
  return _typeof(w) === "object" ? w.innerWidth : undefined;
}

var useScreen = function useScreen() {
  var _useTheme = (0, _styles.useTheme)(),
      breakpoints = _useTheme.breakpoints;

  var _useWindowCtx = (0, _WindowContext.useWindowCtx)(),
      iWindow = _useWindowCtx.iWindow;

  var getScreen = function getScreen() {
    return (0, _mapWidthToScreen.mapWidthToScreen)(getWindowWidth(iWindow), breakpoints);
  };

  var _React$useState = _react["default"].useState(getScreen()),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      screen = _React$useState2[0],
      setScreen = _React$useState2[1];

  var updater = _react["default"].useRef((0, _utils.debounce)(function () {
    setScreen(getScreen());
  }, 200));

  _react["default"].useEffect(function () {
    if (iWindow !== undefined) {
      iWindow.addEventListener("resize", updater.current);
      return function () {
        iWindow.removeEventListener("resize", updater.current);
      };
    }
  }, []);

  return screen;
};

exports.useScreen = useScreen;
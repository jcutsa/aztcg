"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useSidebarAutoCollapse = void 0;

var _react = require("react");

var _useScreen = require("./useScreen");

var _Root = require("../Root/Root");

var _muiBreakpoints = require("../utils/muiBreakpoints");

var useSidebarAutoCollapse = function useSidebarAutoCollapse(sidebarId) {
  var _builder$sidebarId;

  var _useLayoutCtx = (0, _Root.useLayoutCtx)(),
      builder = _useLayoutCtx.builder,
      setCollapsed = _useLayoutCtx.setCollapsed;

  var screen = (0, _useScreen.useScreen)();
  var prevScreen = (0, _react.useRef)(screen);
  var collapsedBp = sidebarId ? (_builder$sidebarId = builder[sidebarId]) === null || _builder$sidebarId === void 0 ? void 0 : _builder$sidebarId.autoCollapse : undefined;
  (0, _react.useEffect)(function () {
    if (sidebarId && collapsedBp && screen && prevScreen.current) {
      if (screen === prevScreen.current && _muiBreakpoints.BREAKPOINT_KEYS.indexOf(screen) <= _muiBreakpoints.BREAKPOINT_KEYS.indexOf(collapsedBp)) {
        // first mount on browser
        setCollapsed(sidebarId, true);
      } // when viewport changes


      if (screen !== prevScreen.current) {
        if (_muiBreakpoints.BREAKPOINT_KEYS.indexOf(prevScreen.current) <= _muiBreakpoints.BREAKPOINT_KEYS.indexOf(collapsedBp) && _muiBreakpoints.BREAKPOINT_KEYS.indexOf(collapsedBp) < _muiBreakpoints.BREAKPOINT_KEYS.indexOf(screen)) {
          setCollapsed(sidebarId, false);
        }

        if (_muiBreakpoints.BREAKPOINT_KEYS.indexOf(prevScreen.current) > _muiBreakpoints.BREAKPOINT_KEYS.indexOf(collapsedBp) && _muiBreakpoints.BREAKPOINT_KEYS.indexOf(collapsedBp) >= _muiBreakpoints.BREAKPOINT_KEYS.indexOf(screen)) {
          setCollapsed(sidebarId, true);
        }

        prevScreen.current = screen;
      }
    }
  }, [screen]);
};

exports.useSidebarAutoCollapse = useSidebarAutoCollapse;
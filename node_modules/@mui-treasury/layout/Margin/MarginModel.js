"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createMarginInterface = exports.combineMargin = exports.getCssMargin = void 0;

var _isNil = require("../utils/isNil");

var _toValidCssValue = require("../utils/toValidCssValue");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var getCssMargin = function getCssMargin(m) {
  if (typeof m === "string") {
    return "calc(".concat(m, ")");
  }

  return m;
};

exports.getCssMargin = getCssMargin;

var transformMargin = function transformMargin(m) {
  var fn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function (val) {
    return val;
  };
  return _objectSpread(_objectSpread({}, !(0, _isNil.isNil)(m.marginLeft) && {
    marginLeft: fn(m.marginLeft)
  }), !(0, _isNil.isNil)(m.marginRight) && {
    marginRight: fn(m.marginRight)
  });
};

var getCssValue = function getCssValue(v1, v2) {
  if ((0, _isNil.isNil)(v1)) return v2;
  if ((0, _isNil.isNil)(v2)) return v1;
  return "".concat((0, _toValidCssValue.toValidCssValue)(v1), " + ").concat((0, _toValidCssValue.toValidCssValue)(v2));
};

var combineMargin = function combineMargin(m1, m2) {
  if (!m1 && m2) return m2;
  if (m1 && !m2) return m1;
  var marginLeft = getCssValue(m1 === null || m1 === void 0 ? void 0 : m1.marginLeft, m2 === null || m2 === void 0 ? void 0 : m2.marginLeft);
  var marginRight = getCssValue(m1 === null || m1 === void 0 ? void 0 : m1.marginRight, m2 === null || m2 === void 0 ? void 0 : m2.marginRight);
  return transformMargin({
    marginLeft: marginLeft,
    marginRight: marginRight
  });
};

exports.combineMargin = combineMargin;

var createMarginInterface = function createMarginInterface(value) {
  return {
    value: value,
    combine: function combine(m) {
      return createMarginInterface(combineMargin(value, m.value));
    },
    getStyle: function getStyle() {
      return transformMargin(value, getCssMargin);
    }
  };
};

exports.createMarginInterface = createMarginInterface;
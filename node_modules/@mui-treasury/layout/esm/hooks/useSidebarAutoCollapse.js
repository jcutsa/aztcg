import { useEffect, useRef } from "react";
import { useScreen } from "./useScreen";
import { useLayoutCtx } from "../Root/Root";
import { BREAKPOINT_KEYS } from "../utils/muiBreakpoints";
export var useSidebarAutoCollapse = sidebarId => {
  var _builder$sidebarId;

  var {
    builder,
    setCollapsed
  } = useLayoutCtx();
  var screen = useScreen();
  var prevScreen = useRef(screen);
  var collapsedBp = sidebarId ? (_builder$sidebarId = builder[sidebarId]) === null || _builder$sidebarId === void 0 ? void 0 : _builder$sidebarId.autoCollapse : undefined;
  useEffect(() => {
    if (sidebarId && collapsedBp && screen && prevScreen.current) {
      if (screen === prevScreen.current && BREAKPOINT_KEYS.indexOf(screen) <= BREAKPOINT_KEYS.indexOf(collapsedBp)) {
        // first mount on browser
        setCollapsed(sidebarId, true);
      } // when viewport changes


      if (screen !== prevScreen.current) {
        if (BREAKPOINT_KEYS.indexOf(prevScreen.current) <= BREAKPOINT_KEYS.indexOf(collapsedBp) && BREAKPOINT_KEYS.indexOf(collapsedBp) < BREAKPOINT_KEYS.indexOf(screen)) {
          setCollapsed(sidebarId, false);
        }

        if (BREAKPOINT_KEYS.indexOf(prevScreen.current) > BREAKPOINT_KEYS.indexOf(collapsedBp) && BREAKPOINT_KEYS.indexOf(collapsedBp) >= BREAKPOINT_KEYS.indexOf(screen)) {
          setCollapsed(sidebarId, true);
        }

        prevScreen.current = screen;
      }
    }
  }, [screen]);
};
import React from "react";
import { debounce } from "@mui/material/utils";
import { useTheme } from "@mui/material/styles";
import { mapWidthToScreen } from "../utils/mapWidthToScreen";
import { useWindowCtx } from "../WindowContext";

function getWindowWidth(w) {
  return typeof w === "object" ? w.innerWidth : undefined;
}

export var useScreen = () => {
  var {
    breakpoints
  } = useTheme();
  var {
    iWindow
  } = useWindowCtx();

  var getScreen = () => mapWidthToScreen(getWindowWidth(iWindow), breakpoints);

  var [screen, setScreen] = React.useState(getScreen());
  var updater = React.useRef(debounce(() => {
    setScreen(getScreen());
  }, 200));
  React.useEffect(() => {
    if (iWindow !== undefined) {
      iWindow.addEventListener("resize", updater.current);
      return () => {
        iWindow.removeEventListener("resize", updater.current);
      };
    }
  }, []);
  return screen;
};
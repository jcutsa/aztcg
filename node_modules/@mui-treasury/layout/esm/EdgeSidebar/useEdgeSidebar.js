function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import { useLayoutCtx } from "../Root/Root";
import { useLooseSidebarCtx } from "./EdgeSidebar";
export var useEdgeSidebar = options => {
  var _sidebar$anchor;

  var {
    anchor
  } = options !== null && options !== void 0 ? options : {};
  var sidebar = useLooseSidebarCtx();

  var _useLayoutCtx = useLayoutCtx(),
      {
    state,
    builder
  } = _useLayoutCtx,
      triggers = _objectWithoutProperties(_useLayoutCtx, ["state", "builder"]);

  if (!sidebar && !anchor) {
    throw new Error('Missing "anchor" property because this component is rendered outside of <EdgeSidebar />');
  }

  var sidebarAnchor = (_sidebar$anchor = sidebar === null || sidebar === void 0 ? void 0 : sidebar.anchor) !== null && _sidebar$anchor !== void 0 ? _sidebar$anchor : anchor;
  var sidebarId = sidebar ? sidebar.id : "".concat(sidebarAnchor, "EdgeSidebar");
  var sidebarState = state[sidebarId];
  return _objectSpread(_objectSpread(_objectSpread({
    sidebarId
  }, sidebarState), triggers), {}, {
    edgeSidebar: builder[sidebarId]
  });
};
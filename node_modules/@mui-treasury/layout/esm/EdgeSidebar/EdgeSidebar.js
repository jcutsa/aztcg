function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React, { useContext } from "react";
import cx from "clsx";
import { styled, useThemeProps } from "@mui/material/styles";
import Drawer, { drawerClasses } from "@mui/material/Drawer";
import { useLayoutCtx } from "../Root/Root";
import { useScreen } from "../hooks/useScreen";
import { pickNearestBreakpoint } from "../utils/pickNearestBreakpoint";
import { useSidebarAutoCollapse } from "../hooks/useSidebarAutoCollapse";
import { EDGE_SIDEBAR_EXPAND_DELAY, CSS_TRANSITION } from "../utils/constant";
import { EdgeOffset } from "./EdgeOffset";
import { useWindowCtx } from "../WindowContext";
export var SidebarContext = /*#__PURE__*/React.createContext(undefined);
export var useSidebarCtx = () => {
  var ctx = useContext(SidebarContext);

  if (!ctx) {
    throw new Error("useSidebarCtx must be called under <EdgeSidebar />");
  }

  return ctx;
};
export var useLooseSidebarCtx = () => {
  return useContext(SidebarContext);
};

var hasAutoExpanded = config => {
  return !!config && (typeof config.autoExpanded === "boolean" || typeof config.uncollapsedOnHover === "boolean");
};

var EdgeSidebarRoot = styled(Drawer, {
  name: "AppEdgeSidebar",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})((_ref) => {
  var {
    ownerState
  } = _ref;
  return _objectSpread({}, (ownerState.entered || ownerState.variant === "permanent" || ownerState.variant === "persistent") && {
    ["& .".concat(drawerClasses.paper)]: {
      transition: "".concat(CSS_TRANSITION, " !important"),
      transitionProperty: "all !important"
    }
  });
});
export var EdgeSidebar = (_ref2) => {
  var _layoutState$sidebarI, _iDocument$body, _props$ModalProps, _props$PaperProps3, _props$PaperProps4, _props$PaperProps5, _builder$sidebarId;

  var {
    children
  } = _ref2,
      inProps = _objectWithoutProperties(_ref2, ["children"]);

  var props = useThemeProps({
    props: inProps,
    name: "AppEdgeSidebar"
  });
  var {
    anchor
  } = props;

  if (!anchor) {
    throw new Error('Missing prop "anchor" on EdgeSidebar component');
  }

  var screen = useScreen();
  var {
    iDocument
  } = useWindowCtx();
  var ctx = useLayoutCtx();
  var {
    builder,
    state: layoutState,
    setOpen
  } = ctx;
  var sidebarId = "".concat(anchor, "EdgeSidebar");
  var edgeSidebar = builder[sidebarId];
  var sidebarState = layoutState[sidebarId];
  var config = pickNearestBreakpoint(edgeSidebar === null || edgeSidebar === void 0 ? void 0 : edgeSidebar.config, screen);
  useSidebarAutoCollapse(sidebarId); // auto-expanded feature

  var [entered, setEntered] = React.useState(false);
  var [expanded, setExpanded] = React.useState(false);
  var isMouseOverSidebar = React.useRef(false);
  var isAutoExpanded = hasAutoExpanded(config) && (config.autoExpanded || config.uncollapsedOnHover);

  var onMouseEnter = event => {
    var _props$PaperProps, _props$PaperProps$onM;

    (_props$PaperProps = props.PaperProps) === null || _props$PaperProps === void 0 ? void 0 : (_props$PaperProps$onM = _props$PaperProps.onMouseEnter) === null || _props$PaperProps$onM === void 0 ? void 0 : _props$PaperProps$onM.call(_props$PaperProps, event);

    if (sidebarState !== null && sidebarState !== void 0 && sidebarState.collapsed && isAutoExpanded) {
      isMouseOverSidebar.current = true;
      setTimeout(() => {
        if (isMouseOverSidebar.current) {
          setExpanded(true);
        }
      }, EDGE_SIDEBAR_EXPAND_DELAY);
    }
  };

  var onMouseLeave = event => {
    var _props$PaperProps2, _props$PaperProps2$on;

    (_props$PaperProps2 = props.PaperProps) === null || _props$PaperProps2 === void 0 ? void 0 : (_props$PaperProps2$on = _props$PaperProps2.onMouseLeave) === null || _props$PaperProps2$on === void 0 ? void 0 : _props$PaperProps2$on.call(_props$PaperProps2, event);
    isMouseOverSidebar.current = false;
    setExpanded(false);
  };

  var onEntered = function onEntered() {
    var _props$SlideProps, _props$SlideProps$onE;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    // @ts-ignore
    (_props$SlideProps = props.SlideProps) === null || _props$SlideProps === void 0 ? void 0 : (_props$SlideProps$onE = _props$SlideProps.onEntered) === null || _props$SlideProps$onE === void 0 ? void 0 : _props$SlideProps$onE.call(_props$SlideProps, ...args);
    setEntered(true);
  };

  var onExit = function onExit() {
    var _props$SlideProps2, _props$SlideProps2$on;

    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    // @ts-ignore
    (_props$SlideProps2 = props.SlideProps) === null || _props$SlideProps2 === void 0 ? void 0 : (_props$SlideProps2$on = _props$SlideProps2.onExit) === null || _props$SlideProps2$on === void 0 ? void 0 : _props$SlideProps2$on.call(_props$SlideProps2, ...args);
    setEntered(false);
  };

  React.useEffect(() => {
    if (!(sidebarState !== null && sidebarState !== void 0 && sidebarState.collapsed)) {
      setExpanded(false);
    }
  }, [sidebarState === null || sidebarState === void 0 ? void 0 : sidebarState.collapsed]);
  var sidebarValue = React.useMemo(() => ({
    id: sidebarId,
    anchor,
    expanded,
    setExpanded
  }), [sidebarId, anchor, expanded, setExpanded]);
  if (!screen) return null;
  if (!edgeSidebar || !edgeSidebar.id) return null;
  var responsiveVariant = edgeSidebar.getDrawerVariant();
  var variant = pickNearestBreakpoint(responsiveVariant, screen);
  if (!variant) return null;

  var ownerState = _objectSpread(_objectSpread({}, props), {}, {
    entered,
    variant
  });

  return /*#__PURE__*/React.createElement(SidebarContext.Provider, {
    value: sidebarValue
  }, /*#__PURE__*/React.createElement(EdgeSidebarRoot, _extends({}, props, {
    open: (_layoutState$sidebarI = layoutState[sidebarId]) === null || _layoutState$sidebarI === void 0 ? void 0 : _layoutState$sidebarI.open,
    anchor: anchor,
    variant: variant,
    ownerState: ownerState,
    onClose: function onClose() {
      var _props$onClose;

      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }

      (_props$onClose = props.onClose) === null || _props$onClose === void 0 ? void 0 : _props$onClose.call(props, ...args);
      setOpen(sidebarId, false);
    },
    SlideProps: _objectSpread(_objectSpread({}, props.SlideProps), {}, {
      onEntered,
      onExit
    }),
    ModalProps: _objectSpread(_objectSpread({}, props.ModalProps), {}, {
      container: (_iDocument$body = iDocument === null || iDocument === void 0 ? void 0 : iDocument.body) !== null && _iDocument$body !== void 0 ? _iDocument$body : (_props$ModalProps = props.ModalProps) === null || _props$ModalProps === void 0 ? void 0 : _props$ModalProps.container
    }),
    PaperProps: _objectSpread(_objectSpread({}, props.PaperProps), {}, {
      className: cx((_props$PaperProps3 = props.PaperProps) === null || _props$PaperProps3 === void 0 ? void 0 : _props$PaperProps3.className, expanded && "AppEdgeSidebar-paperExpanded"),
      style: _objectSpread(_objectSpread({}, (_props$PaperProps4 = props.PaperProps) === null || _props$PaperProps4 === void 0 ? void 0 : _props$PaperProps4.style), expanded && {
        width: config === null || config === void 0 ? void 0 : config.width,
        overflow: "visible"
      }),
      onMouseEnter,
      onMouseLeave,
      sx: _objectSpread(_objectSpread({}, (_props$PaperProps5 = props.PaperProps) === null || _props$PaperProps5 === void 0 ? void 0 : _props$PaperProps5.sx), (_builder$sidebarId = builder[sidebarId]) === null || _builder$sidebarId === void 0 ? void 0 : _builder$sidebarId.getSxProps())
    })
  }), variant && variant !== "temporary" && /*#__PURE__*/React.createElement(EdgeOffset, {
    sidebarId: sidebarId
  }), typeof children === "function" ? children(_objectSpread(_objectSpread({}, ctx), {}, {
    expanded,
    entered,
    isMouseOverSidebar: isMouseOverSidebar.current
  })) : children));
};
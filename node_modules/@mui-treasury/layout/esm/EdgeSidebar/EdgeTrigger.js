function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from "react";
import { styled } from "@mui/material/styles";
import { useEdgeSidebar } from "./useEdgeSidebar";
var EdgeTriggerRoot = styled("div", {
  name: "EdgeTrigger"
})({});
export var EdgeTrigger = (_ref) => {
  var _state$field;

  var {
    target,
    display = "inline-flex",
    children
  } = _ref,
      props = _objectWithoutProperties(_ref, ["target", "display", "children"]);

  var {
    anchor,
    field
  } = target;

  var _useEdgeSidebar = useEdgeSidebar({
    anchor
  }),
      {
    sidebarId,
    edgeSidebar
  } = _useEdgeSidebar,
      state = _objectWithoutProperties(_useEdgeSidebar, ["sidebarId", "edgeSidebar"]);

  var sxDisplay = edgeSidebar === null || edgeSidebar === void 0 ? void 0 : edgeSidebar.getEdgeTriggerSxDisplay({
    display,
    field
  });

  var setState = val => {};

  if (field === "collapsed") {
    setState = val => state.setCollapsed(sidebarId, val);
  }

  if (field === "open") {
    setState = val => state.setOpen(sidebarId, val);
  }

  return /*#__PURE__*/React.createElement(EdgeTriggerRoot, _extends({}, props, {
    sx: _objectSpread({
      display: sxDisplay
    }, props.sx)
  }), typeof children === "function" && children((_state$field = state[field]) !== null && _state$field !== void 0 ? _state$field : false, setState));
};
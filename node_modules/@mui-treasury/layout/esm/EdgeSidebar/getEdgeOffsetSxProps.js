function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { combineBreakpoints } from "../utils/combineBreakpoints";
import { pickNearestBreakpoint } from "../utils/pickNearestBreakpoint";
export var getEdgeOffsetSxProps = (edgeSidebar, sxClippedHeight) => {
  var result = {};

  if (edgeSidebar && edgeSidebar.id) {
    var breakpoints = combineBreakpoints(edgeSidebar.config, sxClippedHeight);

    for (var key of breakpoints) {
      var _pickNearestBreakpoin;

      var bp = key;
      result[bp] = (_pickNearestBreakpoin = pickNearestBreakpoint(sxClippedHeight, bp)) !== null && _pickNearestBreakpoin !== void 0 ? _pickNearestBreakpoin : 0;
    }
  }

  return _objectSpread({}, Object.keys(result).length > 0 && {
    height: result
  });
};
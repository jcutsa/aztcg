function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from "react";
import { styled, useTheme } from "@mui/material/styles";
import { useLayoutCtx } from "../Root/Root";
import { useScreen } from "../hooks/useScreen";
import { EdgeSidebarBuilder } from "./EdgeSidebarBuilder";
import { pickNearestBreakpoint } from "../utils/pickNearestBreakpoint";
import { useScrollY } from "../hooks/useScrollY";
import { HeadersCompiler } from "../MultiHeaders/HeadersCompiler";
import { getEdgeOffsetSxProps } from "./getEdgeOffsetSxProps";
var OffsetRoot = styled("div", {
  name: "EdgeSidebarOffset",
  slot: "Root"
})({});
export var EdgeOffset = (_ref) => {
  var {
    sidebarId
  } = _ref;
  var {
    builder
  } = useLayoutCtx();
  var theme = useTheme();
  var screen = useScreen();
  var edgeSidebar = builder[sidebarId];
  var sidebarConfig = pickNearestBreakpoint(edgeSidebar === null || edgeSidebar === void 0 ? void 0 : edgeSidebar.config, screen);
  var headerMagnetEnabled = (EdgeSidebarBuilder.isPermanentConfig(sidebarConfig) || EdgeSidebarBuilder.isPersistentConfig(sidebarConfig)) && (sidebarConfig === null || sidebarConfig === void 0 ? void 0 : sidebarConfig.headerMagnetEnabled); // dont't calculate scrollY if not magnet for performance

  var scrollY = useScrollY(!headerMagnetEnabled);
  var {
    totalHeight,
    diffHeight
  } = HeadersCompiler([builder.header, builder.topHeader, builder.subheader]).getClippedHeight(sidebarId); // header magnet geature

  var style = {};

  if (headerMagnetEnabled) {
    var maxOffset = diffHeight && screen ? pickNearestBreakpoint(diffHeight, screen) : 0;
    style.marginTop = "max(-".concat(scrollY !== null && scrollY !== void 0 ? scrollY : 0, "px, calc(-1 * ").concat(maxOffset, "))");
  } // header offset


  var sxProps = getEdgeOffsetSxProps(edgeSidebar, totalHeight);
  return /*#__PURE__*/React.createElement(OffsetRoot, {
    className: "EdgeHeaderOffset",
    sx: _objectSpread(_objectSpread({}, sxProps), {}, {
      transition: theme.transitions.create(["all"], {
        easing: theme.transitions.easing.sharp,
        duration: theme.transitions.duration.short
      })
    }),
    style: style
  });
};
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { ResponsiveBuilder } from "../shared/ResponsiveBuilder";
import { combineBreakpoints } from "../utils/combineBreakpoints";
import { DEFAULT_THEME } from "../utils/constant";
import { pickNearestBreakpoint } from "../utils/pickNearestBreakpoint";
export class EdgeSidebarBuilder extends ResponsiveBuilder {
  constructor(params) {
    super(params);

    _defineProperty(this, "effectedBy", {});

    _defineProperty(this, "getFinalWidth", config => {
      var _this$state, _config$collapsedWidt;

      return config !== null && config !== void 0 && config.collapsible && (_this$state = this.state) !== null && _this$state !== void 0 && _this$state.collapsed ? (_config$collapsedWidt = config.collapsedWidth) !== null && _config$collapsedWidt !== void 0 ? _config$collapsedWidt : config.width : config === null || config === void 0 ? void 0 : config.width;
    });

    this.autoCollapse = params.autoCollapse;
  }

  setState(state) {
    this.state = state;
  }

  isFlexiblePersistent(breakpoint, id) {
    var config = pickNearestBreakpoint(this.config, breakpoint);
    return EdgeSidebarBuilder.isFlexiblePersistentConfig(config, id);
  }

  getOccupiedSpace(id) {
    return this.generateSxWithHidden({
      hiddenValue: 0,
      assignValue: (breakpointConfig, _, lastResultVal) => {
        if (EdgeSidebarBuilder.isTemporaryConfig(breakpointConfig)) {
          if (lastResultVal !== undefined) {
            return 0;
          }

          return undefined; // do nothing for xs because temporary variant will be modal
        }

        if (EdgeSidebarBuilder.isPersistentConfig(breakpointConfig)) {
          var _this$state2;

          if ((_this$state2 = this.state) !== null && _this$state2 !== void 0 && _this$state2.open && !EdgeSidebarBuilder.isNonePersistentConfig(breakpointConfig, id)) {
            return this.getFinalWidth(breakpointConfig);
          } else {
            return 0;
          }
        }

        if (EdgeSidebarBuilder.isPermanentConfig(breakpointConfig)) {
          return this.getFinalWidth(breakpointConfig);
        }
      }
    });
  }

  getZIndex() {
    var theme = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_THEME;
    var result = {};
    if (!this.effectedBy.header) return {};
    var breakpoints = combineBreakpoints(this.effectedBy.header.config, this.config);

    for (var key of breakpoints) {
      var bp = key;

      if (this.id) {
        var isClipped = this.effectedBy.header.isClipped(this.id, bp);
        var isAboveSomeEdgeSidebar = this.effectedBy.header.isAboveSomeEdgeSidebar(bp);
        result[bp] = theme.zIndex.drawer + (isAboveSomeEdgeSidebar && !isClipped ? 20 : 0);
      } else {
        console.warn("Cannot find EdgeSidebar id. This might be an internal bug, please open an issue in github.");
      }
    }

    return result;
  }

  getWidth() {
    return this.generateSx((breakpointConfig, bp) => {
      var _this$config$bp;

      return EdgeSidebarBuilder.isTemporaryConfig(breakpointConfig) ? (_this$config$bp = this.config[bp]) === null || _this$config$bp === void 0 ? void 0 : _this$config$bp.width : this.getFinalWidth(breakpointConfig);
    });
  }

  getDrawerVariant() {
    return this.generateSx(config => config.variant);
  }

  getSxProps() {
    var theme = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_THEME;
    var sxDisplay = this.getSxDisplay("flex");
    var displayKeys = Object.keys(sxDisplay);
    var shouldAttachDisplay = displayKeys.length > 1 || displayKeys.length === 1 && displayKeys[0] !== "xs";
    return _objectSpread({
      width: this.getWidth(),
      zIndex: this.getZIndex(theme)
    }, shouldAttachDisplay && {
      display: sxDisplay
    });
  }

  getEdgeTriggerSxDisplay(options) {
    var {
      field,
      display = "inline-flex"
    } = options;
    return this.generateSxWithHidden({
      strict: true,
      hiddenValue: "none",
      assignValue: config => {
        if (field === "open") {
          if (EdgeSidebarBuilder.isPermanentConfig(config)) {
            return "none";
          } else {
            return display;
          }
        }

        if (field === "collapsed") {
          if (EdgeSidebarBuilder.isCollapsibleConfig(config)) {
            return display;
          } else {
            return "none";
          }
        }
      }
    });
  }

}

_defineProperty(EdgeSidebarBuilder, "isPersistentConfig", config => {
  return (config === null || config === void 0 ? void 0 : config.variant) === "persistent";
});

_defineProperty(EdgeSidebarBuilder, "isNonePersistentConfig", (config, id) => {
  return !!config && !!EdgeSidebarBuilder.isPersistentConfig(config) && (typeof config.persistentBehavior === "string" && config.persistentBehavior === "none" || typeof config.persistentBehavior === "object" && !!id && config.persistentBehavior[id] === "none");
});

_defineProperty(EdgeSidebarBuilder, "isFlexiblePersistentConfig", (config, id) => {
  return !!config && !!EdgeSidebarBuilder.isPersistentConfig(config) && (typeof config.persistentBehavior === "string" && config.persistentBehavior === "flexible" || typeof config.persistentBehavior === "object" && !!id && config.persistentBehavior[id] === "flexible");
});

_defineProperty(EdgeSidebarBuilder, "isCollapsibleConfig", config => {
  return (EdgeSidebarBuilder.isPermanentConfig(config) || EdgeSidebarBuilder.isPersistentConfig(config)) && !!(config !== null && config !== void 0 && config.collapsible);
});

_defineProperty(EdgeSidebarBuilder, "isPermanentConfig", config => {
  return (config === null || config === void 0 ? void 0 : config.variant) === "permanent";
});

_defineProperty(EdgeSidebarBuilder, "isTemporaryConfig", config => {
  return (config === null || config === void 0 ? void 0 : config.variant) === "temporary";
});
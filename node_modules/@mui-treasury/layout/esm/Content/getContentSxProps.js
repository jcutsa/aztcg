import { createWidthInterface } from "../Width/WidthModel";
import { combineBreakpoints } from "../utils/combineBreakpoints";
import { pickNearestBreakpoint } from "../utils/pickNearestBreakpoint";
import { toValidCssValue } from "../utils/toValidCssValue";
export var getContentSxProps = (modules, id) => {
  var _leftEdgeSidebar$getO, _rightEdgeSidebar$get;

  var result = {
    width: {},
    marginLeft: {},
    marginRight: {}
  };
  var {
    leftEdgeSidebar,
    rightEdgeSidebar
  } = modules;
  var leftOccupiedSpace = (_leftEdgeSidebar$getO = leftEdgeSidebar === null || leftEdgeSidebar === void 0 ? void 0 : leftEdgeSidebar.getOccupiedSpace()) !== null && _leftEdgeSidebar$getO !== void 0 ? _leftEdgeSidebar$getO : {};
  var rightOccupiedSpace = (_rightEdgeSidebar$get = rightEdgeSidebar === null || rightEdgeSidebar === void 0 ? void 0 : rightEdgeSidebar.getOccupiedSpace()) !== null && _rightEdgeSidebar$get !== void 0 ? _rightEdgeSidebar$get : {};
  var breakpoints = combineBreakpoints(leftOccupiedSpace, rightOccupiedSpace);

  for (var key of breakpoints) {
    var bp = key;
    var effectLeft = createWidthInterface(0);

    if (leftEdgeSidebar) {
      effectLeft = createWidthInterface(leftEdgeSidebar.isFlexiblePersistent(bp, id) ? 0 : pickNearestBreakpoint(leftOccupiedSpace, bp));
      var occupiedSpace = leftOccupiedSpace[bp];

      if (occupiedSpace) {
        result.marginLeft[bp] = toValidCssValue(occupiedSpace);
      }
    }

    var effectRight = createWidthInterface(0);

    if (rightEdgeSidebar) {
      effectRight = createWidthInterface(rightEdgeSidebar.isFlexiblePersistent(bp, id) ? 0 : pickNearestBreakpoint(rightOccupiedSpace, bp));
      var _occupiedSpace = rightOccupiedSpace[bp];

      if (_occupiedSpace) {
        result.marginRight[bp] = toValidCssValue(_occupiedSpace);
      }
    }

    result.width[bp] = effectLeft.combine(effectRight).getStyle().width;
  }

  return result;
};
function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from "react";
import cx from "clsx";
import { styled, useThemeProps } from "@mui/material/styles";
import { useLayoutCtx } from "../Root/Root";
import { getContentSxProps } from "./getContentSxProps";
import { CONTENT_ID, CSS_TRANSITION } from "../utils/constant";
import { useFullscreenCtx } from "../Fullscreen/FullscreenContext";
var ContentRoot = styled("main", {
  name: "AppContent",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})((_ref) => {
  var {
    ownerState
  } = _ref;
  return _objectSpread({
    transition: CSS_TRANSITION
  }, ownerState.isFullscreen && {
    flexGrow: 1,
    minHeight: "0px",
    display: "flex"
  });
});
export var Content = (_ref2) => {
  var {
    children
  } = _ref2,
      inProps = _objectWithoutProperties(_ref2, ["children"]);

  var props = useThemeProps({
    props: inProps,
    name: "AppContent"
  });
  var ctx = useLayoutCtx();
  var {
    builder
  } = ctx;
  var sxProps = getContentSxProps(builder, CONTENT_ID);
  var isFullscreen = useFullscreenCtx();
  return /*#__PURE__*/React.createElement(ContentRoot, _extends({}, props, {
    className: cx("Content", props.className),
    sx: _objectSpread(_objectSpread(_objectSpread({}, isFullscreen && {
      flexGrow: 1,
      minHeight: 0,
      display: "flex"
    }), props.sx), sxProps),
    ownerState: {
      isFullscreen
    }
  }), typeof children === "function" ? children(ctx) : children);
};
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { isNil } from "../utils/isNil";
import { toValidCssValue } from "../utils/toValidCssValue";
export var getCssMargin = m => {
  if (typeof m === "string") {
    return "calc(".concat(m, ")");
  }

  return m;
};

var transformMargin = function transformMargin(m) {
  var fn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : val => val;
  return _objectSpread(_objectSpread({}, !isNil(m.marginLeft) && {
    marginLeft: fn(m.marginLeft)
  }), !isNil(m.marginRight) && {
    marginRight: fn(m.marginRight)
  });
};

var getCssValue = (v1, v2) => {
  if (isNil(v1)) return v2;
  if (isNil(v2)) return v1;
  return "".concat(toValidCssValue(v1), " + ").concat(toValidCssValue(v2));
};

export var combineMargin = (m1, m2) => {
  if (!m1 && m2) return m2;
  if (m1 && !m2) return m1;
  var marginLeft = getCssValue(m1 === null || m1 === void 0 ? void 0 : m1.marginLeft, m2 === null || m2 === void 0 ? void 0 : m2.marginLeft);
  var marginRight = getCssValue(m1 === null || m1 === void 0 ? void 0 : m1.marginRight, m2 === null || m2 === void 0 ? void 0 : m2.marginRight);
  return transformMargin({
    marginLeft,
    marginRight
  });
};
export var createMarginInterface = value => {
  return {
    value,
    combine: m => createMarginInterface(combineMargin(value, m.value)),
    getStyle: () => transformMargin(value, getCssMargin)
  };
};
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from "react";
import { EdgeSidebarBuilder } from "../EdgeSidebar/EdgeSidebarBuilder";
import { HeaderBuilder } from "../Header/HeaderBuilder";
import { InsetSidebarBuilder } from "../InsetSidebar/InsetSidebarBuilder";
import { LEFT_EDGE_SIDEBAR_ID, RIGHT_EDGE_SIDEBAR_ID } from "../utils/constant";
var LayoutContext = /*#__PURE__*/React.createContext(undefined);
LayoutContext.displayName = "LayoutContext";
export var useLayoutCtx = () => {
  var ctx = React.useContext(LayoutContext);

  if (!ctx) {
    throw new Error("useLayoutCtx must be rendered under LayoutProvider");
  }

  return ctx;
};
export var LayoutConsumer = LayoutContext.Consumer;
var INITIAL_EDGE_SIDEBAR_STATE = {
  open: false,
  collapsed: false
};

var setUpEdgeSidebar = builder => {
  var autoGenInitialState = {
    leftEdgeSidebar: {},
    rightEdgeSidebar: {}
  };

  if (builder.leftEdgeSidebar) {
    builder.leftEdgeSidebar.id = LEFT_EDGE_SIDEBAR_ID;
    autoGenInitialState.leftEdgeSidebar = INITIAL_EDGE_SIDEBAR_STATE;
  }

  if (builder.rightEdgeSidebar) {
    builder.rightEdgeSidebar.id = RIGHT_EDGE_SIDEBAR_ID;
    autoGenInitialState.rightEdgeSidebar = INITIAL_EDGE_SIDEBAR_STATE;
  }

  return autoGenInitialState;
};

var injectStateToEdgeSidebar = (builder, state) => {
  if (builder.leftEdgeSidebar) {
    var _state$leftEdgeSideba;

    builder.leftEdgeSidebar.setState((_state$leftEdgeSideba = state.leftEdgeSidebar) !== null && _state$leftEdgeSideba !== void 0 ? _state$leftEdgeSideba : {});
  }

  if (builder.rightEdgeSidebar) {
    var _state$rightEdgeSideb;

    builder.rightEdgeSidebar.setState((_state$rightEdgeSideb = state.rightEdgeSidebar) !== null && _state$rightEdgeSideb !== void 0 ? _state$rightEdgeSideb : {});
  }
};

export var Root = (_ref) => {
  var {
    initialState: controlledInitialState,
    scheme,
    children
  } = _ref;

  if (!scheme) {
    throw new Error("Missing scheme! fixed by passing `scheme` to <Root scheme={scheme} />");
  }

  var builder = {};
  if (scheme.header) builder.header = new HeaderBuilder(scheme.header);
  if (scheme.topHeader) builder.topHeader = new HeaderBuilder(scheme.topHeader);
  if (scheme.subheader) builder.subheader = new HeaderBuilder(scheme.subheader);
  if (scheme.leftEdgeSidebar) builder.leftEdgeSidebar = new EdgeSidebarBuilder(scheme.leftEdgeSidebar);
  if (scheme.rightEdgeSidebar) builder.rightEdgeSidebar = new EdgeSidebarBuilder(scheme.rightEdgeSidebar);
  if (scheme.rightInsetSidebar) builder.rightInsetSidebar = new InsetSidebarBuilder(scheme.rightInsetSidebar);
  if (scheme.leftInsetSidebar) builder.leftInsetSidebar = new InsetSidebarBuilder(scheme.leftInsetSidebar);
  var autoGenInitialState = setUpEdgeSidebar(builder);
  var [leftState, setLeftState] = React.useState(_objectSpread(_objectSpread({}, autoGenInitialState.leftEdgeSidebar), controlledInitialState === null || controlledInitialState === void 0 ? void 0 : controlledInitialState.leftEdgeSidebar));
  var [rightState, setRightState] = React.useState(_objectSpread(_objectSpread({}, autoGenInitialState.rightEdgeSidebar), controlledInitialState === null || controlledInitialState === void 0 ? void 0 : controlledInitialState.rightEdgeSidebar));

  var setOpen = (id, value) => {
    function setter(state) {
      return state.open === value ? state : _objectSpread(_objectSpread({}, state), {}, {
        open: value
      });
    }

    if (id === LEFT_EDGE_SIDEBAR_ID) {
      setLeftState(setter);
    }

    if (id === RIGHT_EDGE_SIDEBAR_ID) {
      setRightState(setter);
    }
  };

  var setCollapsed = (id, value) => {
    function setter(state) {
      return state.collapsed === value ? state : _objectSpread(_objectSpread({}, state), {}, {
        collapsed: value
      });
    }

    if (id === LEFT_EDGE_SIDEBAR_ID) {
      setLeftState(setter);
    }

    if (id === RIGHT_EDGE_SIDEBAR_ID) {
      setRightState(setter);
    }
  };

  var toggleLeftSidebarOpen = () => setLeftState(state => _objectSpread(_objectSpread({}, state), {}, {
    open: !state.open
  }));

  var toggleLeftSidebarCollapsed = () => setLeftState(state => _objectSpread(_objectSpread({}, state), {}, {
    collapsed: !state.collapsed
  }));

  var toggleRightSidebarOpen = () => setRightState(state => _objectSpread(_objectSpread({}, state), {}, {
    open: !state.open
  }));

  var toggleRightSidebarCollapsed = () => setRightState(state => _objectSpread(_objectSpread({}, state), {}, {
    collapsed: !state.collapsed
  }));

  injectStateToEdgeSidebar(builder, {
    leftEdgeSidebar: leftState,
    rightEdgeSidebar: rightState
  }); // assign Effect

  if (builder.header) {
    builder.header.effectedBy = {
      leftEdgeSidebar: builder.leftEdgeSidebar,
      rightEdgeSidebar: builder.rightEdgeSidebar
    };
  }

  if (builder.topHeader) {
    builder.topHeader.effectedBy = {
      leftEdgeSidebar: builder.leftEdgeSidebar,
      rightEdgeSidebar: builder.rightEdgeSidebar
    };
  }

  if (builder.subheader) {
    builder.subheader.effectedBy = {
      leftEdgeSidebar: builder.leftEdgeSidebar,
      rightEdgeSidebar: builder.rightEdgeSidebar
    };
  }

  if (builder.leftInsetSidebar) {
    builder.leftInsetSidebar.anchor = "left";
    builder.leftInsetSidebar.effectedBy = {
      header: builder.header
    };
  }

  if (builder.rightInsetSidebar) {
    builder.rightInsetSidebar.anchor = "right";
    builder.rightInsetSidebar.effectedBy = {
      header: builder.header
    };
  }

  var ctx = {
    state: {
      leftEdgeSidebar: leftState,
      rightEdgeSidebar: rightState
    },
    builder,
    setOpen,
    setCollapsed,
    toggleLeftSidebarOpen,
    toggleLeftSidebarCollapsed,
    toggleRightSidebarOpen,
    toggleRightSidebarCollapsed
  };
  return /*#__PURE__*/React.createElement(LayoutContext.Provider, {
    value: ctx
  }, typeof children === "function" ? children(ctx) : children);
};
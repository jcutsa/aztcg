function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from "react";
import cx from "clsx";
import { styled } from "@mui/material/styles";
import { useLayoutCtx } from "../Root/Root";
import { InsetOffset } from "./InsetOffset";
var InsetSidebarRoot = styled("div", {
  name: "AppInsetSidebar",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})({
  position: "relative",
  flexShrink: 0
});
var InsetSidebarBody = styled("div", {
  name: "AppInsetSidebar",
  slot: "Body",
  overridesResolver: (props, styles) => styles.body
})((_ref) => {
  var {
    theme,
    ownerState
  } = _ref;
  return _objectSpread(_objectSpread(_objectSpread({
    display: "flex",
    flexDirection: "column",
    overflow: "auto"
  }, ownerState.anchor === "left" && {
    borderRight: "1px solid"
  }), ownerState.anchor === "right" && {
    borderLeft: "1px solid"
  }), {}, {
    borderColor: theme.palette.divider
  });
});
export var InsetSidebar = (_ref2) => {
  var {
    anchor,
    children,
    classes,
    RootProps,
    rootSx
  } = _ref2,
      props = _objectWithoutProperties(_ref2, ["anchor", "children", "classes", "RootProps", "rootSx"]);

  var ctx = useLayoutCtx();
  var {
    builder
  } = ctx; // anchor should be injected via InsetContainer

  var sidebar = builder["".concat(anchor, "InsetSidebar")];
  return /*#__PURE__*/React.createElement(InsetSidebarRoot, _extends({}, RootProps, {
    className: cx(RootProps === null || RootProps === void 0 ? void 0 : RootProps.className, classes === null || classes === void 0 ? void 0 : classes.root),
    sx: _objectSpread(_objectSpread({}, sidebar === null || sidebar === void 0 ? void 0 : sidebar.getSxRoot()), rootSx)
  }), /*#__PURE__*/React.createElement(InsetSidebarBody, _extends({}, props, {
    className: cx(props === null || props === void 0 ? void 0 : props.className, classes === null || classes === void 0 ? void 0 : classes.paper),
    ownerState: {
      anchor
    },
    sx: _objectSpread(_objectSpread({}, sidebar === null || sidebar === void 0 ? void 0 : sidebar.getSxBody()), props === null || props === void 0 ? void 0 : props.sx)
  }), /*#__PURE__*/React.createElement(InsetOffset, {
    sidebar: sidebar
  }), typeof children === "function" ? children(ctx) : children));
};
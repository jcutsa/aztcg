import React from "react";
import { styled } from "@mui/material/styles";
import { useLayoutCtx } from "../Root/Root";
import { useScrollY } from "../hooks/useScrollY";
import { useScreen } from "../hooks/useScreen";
import { HeadersCompiler } from "../MultiHeaders/HeadersCompiler";
import { pickNearestBreakpoint } from "../utils/pickNearestBreakpoint";
var OffsetRoot = styled("div", {
  name: "InsetSidebarOffset",
  slot: "Root"
})((_ref) => {
  var {
    theme
  } = _ref;
  return {
    transition: theme.transitions.create(["all"], {
      easing: theme.transitions.easing.sharp,
      duration: theme.transitions.duration.short
    })
  };
});
export var InsetOffset = (_ref2) => {
  var {
    sidebar
  } = _ref2;
  var {
    builder
  } = useLayoutCtx();
  var screen = useScreen();
  var insetConfig = pickNearestBreakpoint(sidebar === null || sidebar === void 0 ? void 0 : sidebar.config, screen); // @ts-ignore

  var {
    headerMagnetEnabled
  } = insetConfig !== null && insetConfig !== void 0 ? insetConfig : {}; // dont't calculate scrollY if not magnet for performance

  var scrollY = useScrollY(!headerMagnetEnabled);
  var {
    totalHeight,
    diffHeight
  } = HeadersCompiler([builder.header, builder.topHeader, builder.subheader]).getAllHeight(); // header magnet feature

  var style = {};

  if (headerMagnetEnabled) {
    var maxOffset = diffHeight && screen ? pickNearestBreakpoint(diffHeight, screen) : 0;
    style.marginTop = "max(-".concat(scrollY !== null && scrollY !== void 0 ? scrollY : 0, "px, calc(-1 * ").concat(maxOffset, "))");
  }

  if ((insetConfig === null || insetConfig === void 0 ? void 0 : insetConfig.position) !== "fixed") {
    return null;
  }

  return /*#__PURE__*/React.createElement(OffsetRoot, {
    sx: {
      display: sidebar === null || sidebar === void 0 ? void 0 : sidebar.getSxDisplay("initial"),
      height: totalHeight
    },
    style: style
  });
};
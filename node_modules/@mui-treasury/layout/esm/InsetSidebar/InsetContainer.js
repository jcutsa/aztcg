function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from "react";
import Container from "@mui/material/Container";
import { styled, useThemeProps } from "@mui/material/styles";
var InsetContainerRoot = styled(Container, {
  name: "AppInsetContainer",
  slot: "Root",
  overridesResolver: (props, styles) => styles.root
})({
  display: "flex",
  flexFlow: "row nowrap",
  flexGrow: 1,
  '& > *:not([class*="AppInsetSidebar"])': {
    flexGrow: 1,
    overflow: "auto"
  }
});
export var InsetContainer = (_ref) => {
  var {
    children,
    leftSidebar,
    rightSidebar
  } = _ref,
      inProps = _objectWithoutProperties(_ref, ["children", "leftSidebar", "rightSidebar"]);

  var props = useThemeProps({
    props: inProps,
    name: "AppInsetContainer"
  });
  return /*#__PURE__*/React.createElement(InsetContainerRoot, props, leftSidebar && /*#__PURE__*/React.cloneElement(leftSidebar, {
    anchor: "left"
  }), children, rightSidebar && /*#__PURE__*/React.cloneElement(rightSidebar, {
    anchor: "right"
  }));
};
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createSxResult = void 0;

var _muiBreakpoints = require("./muiBreakpoints");

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/**
 *
 *
 * @param getValue the value the result object (undefined will be remove from result)
 * @param options
 *  - breakpoints: list of Breakpoints to be iterate
 *  - initialValue: if provided, will be used to compare if the value from getValue should be added or not
 * @returns object that can be passed to <MuiComponent sx={...} />
 */
var createSxResult = function createSxResult(getValue, options) {
  var _ref = options !== null && options !== void 0 ? options : {},
      _ref$breakpoints = _ref.breakpoints,
      breakpoints = _ref$breakpoints === void 0 ? _muiBreakpoints.BREAKPOINT_KEYS : _ref$breakpoints,
      initialValue = _ref.initialValue;

  var result = {};
  var lastValue = undefined;

  var _iterator = _createForOfIteratorHelper(breakpoints),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var _bp = _step.value;
      var value = getValue(_bp, lastValue);

      if (value !== undefined) {
        // only assign value if not undefined
        if (lastValue === undefined) {
          // 1st valid value
          result[_bp] = value;
          lastValue = value;

          if (initialValue !== undefined && initialValue === value) {
            // if same as initial, deleted from object
            delete result[_bp];
          }
        } else {
          if (lastValue !== value) {
            // next valid value that is not the same as lastValue and so on
            result[_bp] = value;
            lastValue = value;
          }
        }
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return result;
};

exports.createSxResult = createSxResult;
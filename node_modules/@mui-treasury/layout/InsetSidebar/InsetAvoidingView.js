"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InsetAvoidingView = void 0;

var _react = _interopRequireDefault(require("react"));

var _styles = require("@mui/material/styles");

var _Root = require("../Root/Root");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var InsetAvoidingViewRoot = (0, _styles.styled)("div", {
  name: "InsetAvoidingView",
  slot: "Root"
})({
  transition: "all 225ms"
});

var InsetAvoidingView = function InsetAvoidingView(props) {
  var _useLayoutCtx = (0, _Root.useLayoutCtx)(),
      builder = _useLayoutCtx.builder;

  var sxProps = {
    marginLeft: "",
    marginRight: ""
  };

  if (builder.leftInsetSidebar) {
    sxProps.marginLeft = builder.leftInsetSidebar.getOccupiedSpace();
  }

  if (builder.rightInsetSidebar) {
    sxProps.marginRight = builder.rightInsetSidebar.getOccupiedSpace();
  }

  return /*#__PURE__*/_react["default"].createElement(InsetAvoidingViewRoot, _extends({}, props, {
    sx: _objectSpread(_objectSpread({}, props.sx), sxProps)
  }));
};

exports.InsetAvoidingView = InsetAvoidingView;
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InsetSidebarBuilder = void 0;

var _calc = require("../utils/calc");

var _pickNearestBreakpoint = require("../utils/pickNearestBreakpoint");

var _ResponsiveBuilder2 = require("../shared/ResponsiveBuilder");

var _flattenResponsive = require("../utils/flattenResponsive");

var _toValidCssValue = require("../utils/toValidCssValue");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var InsetSidebarBuilder = /*#__PURE__*/function (_ResponsiveBuilder) {
  _inherits(InsetSidebarBuilder, _ResponsiveBuilder);

  var _super = _createSuper(InsetSidebarBuilder);

  function InsetSidebarBuilder(params) {
    var _this;

    _classCallCheck(this, InsetSidebarBuilder);

    _this = _super.call(this, params);

    _defineProperty(_assertThisInitialized(_this), "effectedBy", {});

    return _this;
  }

  _createClass(InsetSidebarBuilder, [{
    key: "getFixedArea",
    value: function getFixedArea() {
      var modifier = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
      return (0, _flattenResponsive.flattenLoose)(this.generateSx(function (config, bp) {
        return config.position === "fixed" ? "".concat(modifier * 9999, "px") : bp === "xs" ? undefined : "initial";
      }));
    }
  }, {
    key: "getSxBody",
    value: function getSxBody() {
      var anchor = this.anchor;
      var height = {};
      var header = this.effectedBy.header;

      if (header) {
        var _header$getSxHeight = header.getSxHeight(),
            responsiveHeight = _header$getSxHeight.height;

        var breakpoints = this.mergeBreakpoints(responsiveHeight !== null && responsiveHeight !== void 0 ? responsiveHeight : []);

        var _iterator = _createForOfIteratorHelper(breakpoints),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var bp = _step.value;
            var insetConfig = (0, _pickNearestBreakpoint.pickNearestBreakpoint)(this.config, bp);

            if ((insetConfig === null || insetConfig === void 0 ? void 0 : insetConfig.position) === "absolute") {
              var headerHeight = (0, _pickNearestBreakpoint.pickNearestBreakpoint)(responsiveHeight, bp);
              height[bp] = headerHeight === 0 || headerHeight === "0px" ? "100vh" : (0, _calc.subtractCalc)("100vh", headerHeight);
            }

            if ((insetConfig === null || insetConfig === void 0 ? void 0 : insetConfig.position) === "fixed") height[bp] = "100%";
            if ((insetConfig === null || insetConfig === void 0 ? void 0 : insetConfig.position) === "sticky") height[bp] = "initial";
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }

      return _objectSpread(_objectSpread({
        height: (0, _flattenResponsive.flattenLoose)(height),
        width: (0, _flattenResponsive.flattenLoose)(this.generateSx(function (config) {
          return config.position === "fixed" ? "initial" : "100%";
        })),
        position: (0, _flattenResponsive.flattenLoose)(this.generateSx(function (config) {
          return config.position;
        })),
        top: (0, _flattenResponsive.flattenLoose)(this.generateSx(function (config) {
          var _config$top;

          return (_config$top = config.top) !== null && _config$top !== void 0 ? _config$top : 0;
        }))
      }, anchor === "left" && {
        marginLeft: this.getFixedArea(-1),
        paddingLeft: this.getFixedArea()
      }), anchor === "right" && {
        marginRight: this.getFixedArea(-1),
        paddingRight: this.getFixedArea()
      });
    }
  }, {
    key: "getSxRoot",
    value: function getSxRoot() {
      return {
        display: (0, _flattenResponsive.flattenStrict)(this.getSxDisplay("block")),
        width: (0, _flattenResponsive.flattenLoose)(this.generateSx(function (config) {
          return (0, _toValidCssValue.toValidCssValue)(config.width);
        }))
      };
    }
  }, {
    key: "getOccupiedSpace",
    value: function getOccupiedSpace() {
      return (0, _flattenResponsive.flattenStrict)(this.generateSxWithHidden({
        assignValue: function assignValue(config) {
          return (0, _toValidCssValue.toValidCssValue)(config.width);
        },
        hiddenValue: "0px",
        strict: true
      }));
    }
  }]);

  return InsetSidebarBuilder;
}(_ResponsiveBuilder2.ResponsiveBuilder);

exports.InsetSidebarBuilder = InsetSidebarBuilder;
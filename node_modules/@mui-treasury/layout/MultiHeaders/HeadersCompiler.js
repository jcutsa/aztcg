"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.HeadersCompiler = void 0;

var _muiBreakpoints = require("../utils/muiBreakpoints");

var _pickNearestBreakpoint = require("../utils/pickNearestBreakpoint");

var _StackedHeaders2 = require("./StackedHeaders");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var HeadersCompiler = function HeadersCompiler(headers) {
  var validHeaders = headers.filter(function (h) {
    return !!h;
  });

  function getResult(modifyConfigAtBreakpoint) {
    var result = {
      totalHeight: {},
      diffHeight: {}
    };
    var prevHidden = Array(validHeaders.length).fill(false); // keep track of hidden in previous breakpoint

    var _iterator = _createForOfIteratorHelper(_muiBreakpoints.BREAKPOINT_KEYS),
        _step;

    try {
      var _loop = function _loop() {
        var bp = _step.value;
        var configs = [];
        var shouldCalculate = false;
        shouldCalculate = prevHidden.some(function (bool) {
          return !!bool;
        });
        validHeaders.forEach(function (builder) {
          if (builder.config[bp]) {
            shouldCalculate = true;
          }
        });

        if (shouldCalculate) {
          validHeaders.forEach(function (builder, index) {
            var breakpointConfig = (0, _pickNearestBreakpoint.pickNearestBreakpoint)(builder.config, bp);

            if (builder.isHidden(bp)) {
              prevHidden[index] = true;

              if (breakpointConfig) {
                configs.push(_objectSpread(_objectSpread({}, breakpointConfig), {}, {
                  height: 0
                }));
              }
            } else {
              if (prevHidden[index]) {
                prevHidden[index] = false;
              }

              if (breakpointConfig) {
                configs.push(modifyConfigAtBreakpoint ? modifyConfigAtBreakpoint(bp, builder, breakpointConfig) : breakpointConfig);
              }
            }
          });
        }

        if (configs.length) {
          var _StackedHeaders = (0, _StackedHeaders2.StackedHeaders)(configs),
              totalHeight = _StackedHeaders.totalHeight,
              diffHeight = _StackedHeaders.diffHeight;

          if ((0, _pickNearestBreakpoint.pickNearestBreakpoint)(result.totalHeight, bp) !== totalHeight) {
            result.totalHeight[bp] = totalHeight;
          }

          if ((0, _pickNearestBreakpoint.pickNearestBreakpoint)(result.diffHeight, bp) !== diffHeight) {
            result.diffHeight[bp] = diffHeight;
          }
        }
      };

      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        _loop();
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    return result;
  }

  return {
    getClippedHeight: function getClippedHeight(sidebarId) {
      // for EdgeSidebarOffset
      return getResult(function (bp, builder, config) {
        return _objectSpread(_objectSpread({}, config), !builder.isClipped(sidebarId, bp) && {
          height: 0
        });
      });
    },
    getAllHeight: function getAllHeight() {
      // for InsetSidebarOffset
      return getResult();
    }
  };
};

exports.HeadersCompiler = HeadersCompiler;
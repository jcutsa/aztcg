"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StackedHeaders = void 0;

var _calc = require("../utils/calc");

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function getMaxFloatHeight(configs) {
  if (!configs.length) return 0;
  if (configs.length === 1) return (0, _calc.plusCalc)(configs[0].height, configs[0].top);
  return "max(".concat(configs.map(function (c) {
    return (0, _calc.plusCalc)(c.height, c.top);
  }).join(", "), ")");
}

function sumHeight(configs) {
  if (!configs.length) return 0;
  return _calc.plusCalc.apply(void 0, _toConsumableArray(configs.map(function (c) {
    return c.height;
  })));
}

var StackedHeaders = function StackedHeaders(configs) {
  var nonRelativeConfigs = [];
  configs.forEach(function (c) {
    if (!!c && c.position !== "relative") {
      nonRelativeConfigs.push(c);
    }
  });
  var maxNonRelativeHeight = getMaxFloatHeight(nonRelativeConfigs);
  var totalHeight = sumHeight(configs.filter(function (c) {
    return !!c;
  })); // for offset height

  var diffHeight = (0, _calc.subtractCalc)(totalHeight, maxNonRelativeHeight); // for -marginTop

  return {
    totalHeight: totalHeight,
    diffHeight: diffHeight
  };
};

exports.StackedHeaders = StackedHeaders;